#!/usr/bin/env ruby
# frozen_string_literal: true

require 'diffy'
require 'optparse'
require 'pry'

# Show diff between two Ghost importers
class DiffGhostImporters
  PARTITION_LENGTH = 80
  MAX_SLUG_LENGTH  = 50

  def initialize
    @options, @arguments = parse_options
    validate!
  end

  def diff
    Dir.glob("#{@arguments.first}/**").each do |filepath1|
      File.basename(filepath1).gsub(/^\d{4}-\d{2}-\d{2}-/, '').then do |slug|
        filepath2 = Dir.glob("#{@arguments.last}/*#{slug}").first

        if filepath2.nil?
          message = 'Corresponding file not found'

          raise message if @options[:strict]

          puts "WARN: #{message}" unless @options[:strict]

          next
        end

        content1 = File.open(filepath1).read
        content2 = File.open(filepath2).read

        print(content1, content2, slug.chomp(File.extname(slug)))
      end
    end
  end

  private

  def print(content1, content2, slug)
    begin_partition, end_partition = partition(slug)

    puts begin_partition

    Diffy::Diff.default_format = :color
    puts Diffy::Diff.new(content1, content2, context: @options[:context])

    puts end_partition
  end

  def partition(slug)
    # omit if slug is too long
    slug = "#{slug[0..(MAX_SLUG_LENGTH - 1)]}..." if slug.length > MAX_SLUG_LENGTH

    begin_partition =
      ('=' * (((PARTITION_LENGTH - slug.length) / 2) - 1)) +
      " #{slug} "                                          +
      ('=' * (((PARTITION_LENGTH - slug.length) / 2) - 1))

    begin_partition = "=#{begin_partition}" if begin_partition.length < PARTITION_LENGTH
    end_partition   = "#{'=' * PARTITION_LENGTH}\n\n\n"

    [begin_partition, end_partition]
  end

  def parse_options
    op = OptionParser.new

    options = {
      context: 0,
      strict: false
    }

    op.on('-c', '--context VALUE', Integer, 'Specify the number of lines of context around changes',
          'Default is 0') do |option|
      options[:context] = option
    end

    op.on('-s', '--strict', 'Stop immediately if the matched file does not exist') do |_option|
      options[:strict] = true
    end

    arguments = op.parse(ARGV)

    [options, arguments]
  end

  def validate!
    if @arguments.count != 2
      raise 'The number of arguments must be 2, ' \
            'which specifies backup directories generated by 2 importers, ' \
            'jekyll-import and jekyll_ghost_importer'
    end

    raise 'No such directories' if !Dir.exist?(@arguments.first) || !Dir.exist?(@arguments.last)
  end
end

diff = DiffGhostImporters.new
diff.diff
