#!/usr/bin/env ruby
# frozen_string_literal: true

require 'erb'
require 'optparse'
require 'time'

begin
  require 'pry'
rescue LoadError
  # puts e
  # puts 'but donâ€™t worry. this is not necessary for ordinary use'
end

# Generate a new article with a YAML header
module Article
  HOUR = 3600

  class NotImplementedError < StandardError; end

  def initialize
    @options, @arguments = parse_options
    validate!
  end

  def generate
    File.open(filepath, 'w') do |f|
      f.write(yaml_header)
    end
  rescue StandardError
    File.delete(filepath)
    raise
  end

  def yaml_header
    raise NotImplementedError
  end

  def filepath
    "#{@arguments.first}/#{filename}"
  end

  def filename
    @options[:slug] ||= nil
    "#{date}-#{@options[:slug]}.md"
  end

  def date
    Time.now.strftime('%Y-%m-%d')
  end

  def time
    Time.now.strftime('%Y-%m-%d %H:%M:%S')
  end

  def zone_offset(timezone)
    offset = Time.zone_offset(timezone.to_s)&./(HOUR)

    return nil if offset.nil?

    sign = offset.positive? ? '+' : '-'
    offset_with_padding = format('%02<number>d', number: offset.abs)

    "#{sign}#{offset_with_padding}00"
  end

  def parse_options
    raise NotImplementedError
  end

  def validate!
    raise 'No arguments given. Specify the target directory' if     @arguments.empty?
    raise 'Too many arguments'                               unless @arguments.count == 1
    raise 'No such directory'                                unless Dir.exist?(@arguments.first)
    raise "#{filepath} already exists"                       if     File.exist?(filepath)
  end

  # returns true if val is...
  #   nil
  #   'true'
  #   'false'
  # otherwise returns false
  def valid_boolean?(val)
    return true if val.nil?
    return true if val == 'true'
    return true if val == 'false'

    false
  end
end

# blog template format
class Blog
  include Article

  def yaml_header
    header = <<~'HEADER'
      ---
      layout: post
      title: "<%= @options[:title] %>"
      image: "<%= @options[:image] %>"
      date: "<%= time %>"
      tags:
      <%- @options[:tags]&.each do |tag| -%>
      - <%= tag %>
      <%- end -%>
      published: <%= @options[:published] %>
      ---
    HEADER

    ERB.new(header, trim_mode: '-').result(binding)
  end

  def parse_options
    op = OptionParser.new

    options = {
      slug: nil,
      title: nil,
      image: nil,
      tags: nil,
      published: 'true'
    }

    op.on('-s', '--slug VALUE', String, 'Specify a slug, which is used for a filename and a post URL') do |option|
      options[:slug] = option
    end

    op.on('-t', '--title VALUE', String, 'Specify a title') do |option|
      options[:title] = option
    end

    op.on('-i', '--image VALUE', String, 'Specify a image, which can be used as a thumbnail') do |option|
      options[:image] = option
    end

    op.on('--tags VALUE', Array, 'Specify tags, which is comma separated for multiple values') do |option|
      options[:tags] = option
    end

    op.on('-p', '--published VALUE', String,
          'Specify whether an article will be public or not with true or false') do |option|
      options[:published] = option
    end

    arguments = op.parse(ARGV)

    [options, arguments]
  end

  def validate!
    super

    raise '--slug missing'                                    if     @options[:slug].nil?
    raise '--published is invalid. Specify "true" or "false"' unless valid_boolean?(@options[:published])
  end
end

# diary template format
class Diary
  include Article

  def yaml_header
    header = <<~'HEADER'
      ---
      layout: post
      title: "<%= date %>"
      # date: "<%= time %><%- if @options[:timezone] -%> <%= zone_offset(@options[:timezone]) %><%- end -%>"
      private: <%= @options[:private] %>
      ---
    HEADER

    ERB.new(header, trim_mode: '-').result(binding)
  end

  def parse_options
    op = OptionParser.new

    options = {
      timezone: nil,
      private: 'false'
    }

    op.on('-t', '--timezone VALUE', String,
          'Specify your timezone, like "EST" (if you live in New York)',
          'Mixing upper case and lower case letters is also acceptable (e.g. est, Est, EST)') do |option|
      options[:timezone] = option
    end

    op.on('-p', '--private VALUE', String,
          'Specify whether there is a private diary in that day with "true" or "false"') do |option|
      options[:private] = option
    end

    arguments = op.parse(ARGV)

    [options, arguments]
  end

  def validate!
    super

    raise '--private is invalid. Specify "true" or "false"' unless valid_boolean?(@options[:private])
  end
end

case ARGV.first
when 'blog'
  ARGV.shift
  article = Blog.new
when 'diary'
  ARGV.shift
  article = Diary.new
else
  raise 'The first argument must be "blog" or "diary"'
end

article.generate
